// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    // 选择输入的元件
    DMux4Way(in=load, sel=address[13..14], a=loadRam0, b=loadRam1, c=loadSrc, d=loadKbd);
    Or(a=loadRam0, b=loadRam1, out=loadRam);

    // 三部分各自的输出
    RAM16K(in=in, load=loadRam, address=address[0..13], out=ramOut);
    Screen(in=in, load=loadSrc, address=address[0..12], out=scrOut);
    Keyboard(out=kbdOut);

    // 在三个输出中选择一个作为最后输出
    // 16K RAM -> address[14]=0
    // 8K Screen -> address[14]=1 address[13]=0
    // 1  Keyboard -> address[14]=1 address[13]=1
    // 先根据address[13]选择keyboard或screen，再根据14选择最终结果
    Mux16(a=scrOut, b=kbdOut, sel=address[13], out=o1);
    Mux16(a=ramOut, b=o1, sel=address[14], out=out);
}